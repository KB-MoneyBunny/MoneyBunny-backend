<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.asset.mapper.AssetCardTransactionMapper">
    <update id="updateMemo">
        UPDATE card_transaction
        SET memo = #{memo}
        WHERE id = #{transactionId}
    </update>

    <update id="updateTransactionCategory">
        UPDATE card_transaction
        SET category_id = #{categoryId}
        WHERE id = #{transactionId}
    </update>


    <select id="sumThisMonthUsedByUserId" resultType="long">
        SELECT COALESCE(SUM(amount), 0)
        FROM card_transaction t
        JOIN user_card c ON t.card_id = c.id
        WHERE c.user_id = #{userId}
        AND t.transaction_date >= DATE_FORMAT(NOW(), '%Y-%m-01')
        AND (t.cancel_status IS NULL OR t.cancel_status != 'normal')
    </select>

    <select id="sumThisMonthUsedByCardId" resultType="long">
        SELECT COALESCE(SUM(amount), 0)
        FROM card_transaction
        WHERE card_id = #{cardId}
        AND transaction_date >= DATE_FORMAT(NOW(), '%Y-%m-01')
        AND (cancel_status IS NULL OR cancel_status != 'normal')
    </select>


    <select id="findByCardIdWithPaging" resultType="org.scoula.asset.domain.CardTransactionVO">
        SELECT *
        FROM card_transaction
        WHERE card_id = #{cardId}
        <if test="txType == null or txType == ''">
        </if>
        <if test="txType == 'expense'">
            AND (cancel_status IS NULL OR cancel_status = '')
        </if>
        <if test="txType == 'refund'">
            AND cancel_status = 'normal'
        </if>
        ORDER BY transaction_date DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="countByCardId" resultType="int">
        SELECT COUNT(*)
        FROM card_transaction
        WHERE card_id = #{cardId}
        <if test="txType == null or txType == ''">
        </if>
        <if test="txType == 'expense'">
            AND (cancel_status IS NULL OR cancel_status = '')
        </if>
        <if test="txType == 'refund'">
            AND cancel_status = 'normal'
        </if>
    </select>

    <select id="findMonthlyCategorySpending" resultType="org.scoula.asset.dto.CategorySpending">
        SELECT
            t.category_id,
            SUM(t.amount) AS amount
        FROM card_transaction t
                 JOIN user_card uc ON t.card_id = uc.id
        WHERE uc.user_id = #{userId}
            AND YEAR(t.transaction_date) = #{year}
          AND MONTH(t.transaction_date) = #{month}
        GROUP BY t.category_id
        ORDER BY amount DESC
    </select>



    <select id="findMonthlyTrend" resultType="org.scoula.asset.dto.MonthlyTrendDTO">
        SELECT
            YEAR(t.transaction_date) AS year,
            MONTH(t.transaction_date) AS month,
            SUM(t.amount) AS totalAmount
        FROM card_transaction t
            JOIN user_card uc ON t.card_id = uc.id
        WHERE uc.user_id = #{userId}
          AND t.cancel_status = ''
          AND (
            (YEAR(t.transaction_date) &lt; #{year}
           OR (YEAR(t.transaction_date) = #{year} AND MONTH(t.transaction_date) &lt;= #{month})
            )
          AND (
            YEAR(t.transaction_date) &gt; #{startYear}
           OR (YEAR(t.transaction_date) = #{startYear} AND MONTH(t.transaction_date) &gt;= #{startMonth})
            )
            )
        GROUP BY YEAR(t.transaction_date), MONTH(t.transaction_date)
        ORDER BY year DESC, month DESC
            LIMIT 6
    </select>


    <select id="findCategoryTransactions" resultType="org.scoula.asset.domain.CardTransactionVO">
        SELECT
            id,
            category_id,
            card_id,
            approval_no,
            amount,
            payment_type,
            installment_month,
            transaction_date,
            store_name,
            store_name1,
            store_type,
            cancel_status,
            cancel_amount,
            memo
        FROM card_transaction
        WHERE category_id = #{categoryId}
            AND YEAR(transaction_date) = #{year}
          AND MONTH(transaction_date) = #{month}
          AND card_id IN (
        SELECT id FROM user_card WHERE user_id = #{userId}
            )
        ORDER BY transaction_date DESC
    </select>

    <select id="findMonthlyTotal" resultType="long">
      <![CDATA[
            SELECT COALESCE(SUM(ct.amount), 0) AS total
            FROM card_transaction ct
                JOIN user_card uc ON uc.id = ct.card_id
            WHERE uc.user_id = #{userId}
              AND ct.cancel_status = ''
              AND ct.transaction_date >= CONCAT(#{year}, '-', LPAD(#{month},2,'0'), '-01')
              AND ct.transaction_date <  DATE_ADD(CONCAT(#{year}, '-', LPAD(#{month},2,'0'), '-01'), INTERVAL 1 MONTH)
            ]]>
    </select>

    <select id="findAllByUserId" resultType="org.scoula.asset.domain.CardTransactionVO">
        SELECT t.*
        FROM card_transaction t
        JOIN user_card c ON t.card_id = c.id
        WHERE c.user_id = #{userId}
    </select>

    <select id="findRecent6MonthsByUserId" resultType="org.scoula.asset.domain.CardTransactionVO">
        SELECT t.*
        FROM card_transaction t
        JOIN user_card c ON t.card_id = c.id
        WHERE c.user_id = #{userId}
          AND t.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
    </select>

    <select id="existsHrdKoreaCardTransactionByUserId" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM card_transaction t
        JOIN user_card c ON t.card_id = c.id
        WHERE c.user_id = #{userId}
          AND t.store_name = '한국산업인력공단'
    </select>

</mapper>
