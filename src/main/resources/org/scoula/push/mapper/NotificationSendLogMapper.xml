<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.push.mapper.NotificationSendLogMapper">

    <!-- 발송 로그 생성 -->
    <insert id="insertSendLog" parameterType="org.scoula.push.domain.NotificationSendLogVO"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notification_send_log (
            notification_id, 
            fcm_token, 
            send_status, 
            attempt_count, 
            error_message, 
            sent_at, 
            created_at
        )
        VALUES (
            #{notificationId}, 
            #{fcmToken}, 
            #{sendStatus}, 
            #{attemptCount}, 
            #{errorMessage}, 
            #{sentAt}, 
            #{createdAt}
        )
    </insert>

    <!-- 발송 상태 업데이트 -->
    <update id="updateSendLogStatus">
        UPDATE notification_send_log 
        SET send_status = #{sendStatus},
            error_message = #{errorMessage},
            sent_at = #{sentAt}
        WHERE id = #{id}
    </update>

    <!-- 재시도 횟수 증가 -->
    <update id="incrementAttemptCount">
        UPDATE notification_send_log 
        SET attempt_count = attempt_count + 1
        WHERE id = #{id}
    </update>

    <!-- 재전송 대상 로그 조회 (PENDING 상태이고 생성된 지 일정 시간 경과) -->
    <select id="findPendingLogsByTime" resultType="org.scoula.push.domain.NotificationSendLogVO">
        SELECT 
            id, 
            notification_id AS notificationId,
            fcm_token AS fcmToken,
            send_status AS sendStatus,
            attempt_count AS attemptCount,
            error_message AS errorMessage,
            sent_at AS sentAt,
            created_at AS createdAt
        FROM notification_send_log
        WHERE send_status = 'PENDING'
          AND created_at &lt;= DATE_SUB(NOW(), INTERVAL #{minutes} MINUTE)
          AND attempt_count &lt; 3
        ORDER BY created_at ASC
        LIMIT 100
    </select>

    <!-- 특정 에러로 여러 번 실패한 토큰 조회 -->
    <select id="findTokensByFailureCount" resultType="string">
        SELECT fcm_token
        FROM notification_send_log
        WHERE send_status = 'FAILED'
          AND error_message = #{errorMessage}
          AND created_at >= DATE_SUB(NOW(), INTERVAL #{hours} HOUR)
        GROUP BY fcm_token
        HAVING COUNT(*) >= #{minFailureCount}
    </select>

    <!-- 특정 FCM 토큰의 모든 로그 삭제 -->
    <delete id="deleteByToken">
        DELETE FROM notification_send_log
        WHERE fcm_token = #{token}
    </delete>

</mapper>