<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.scoula.userPolicy.mapper.UserPolicyMapper">

    <insert id="saveUserPolicyCondition" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user_policy_condition (user_id, age, marriage, income, created_at, updated_at)
        VALUES (#{userId}, #{age}, #{marriage}, #{income}, NOW(), NOW())
    </insert>

    <insert id="saveUserMajors" parameterType="java.util.List">
        INSERT INTO user_major (user_policy_condition_id, major_id, created_at)
        VALUES
        <foreach collection="list" item="major" separator=",">
            (#{major.userPolicyConditionId}, #{major.majorId}, NOW())
        </foreach>
    </insert>

    <insert id="saveUserSpecialConditions" parameterType="java.util.List">
        INSERT INTO user_special_condition (user_policy_condition_id, special_condition_id, created_at)
        VALUES
        <foreach collection="list" item="specialCondition" separator=",">
            (#{specialCondition.userPolicyConditionId}, #{specialCondition.specialConditionId}, NOW())
        </foreach>
    </insert>

    <insert id="saveUserPolicyKeywords" parameterType="java.util.List">
        INSERT INTO user_policy_keyword (user_policy_condition_id, keyword_id, created_at)
        VALUES
        <foreach collection="list" item="keyword" separator=",">
            (#{keyword.userPolicyConditionId}, #{keyword.keywordId}, NOW())
        </foreach>
    </insert>

    <insert id="saveUserPolicyRegions" parameterType="java.util.List">
        INSERT INTO user_policy_region (user_policy_condition_id, region_id, created_at)
        VALUES
        <foreach collection="list" item="region" separator=",">
            (#{region.userPolicyConditionId}, #{region.regionId}, NOW())
        </foreach>
    </insert>

    <insert id="saveUserEmploymentStatuses" parameterType="java.util.List">
        INSERT INTO user_employment_status (user_policy_condition_id, employment_status_id, created_at)
        VALUES
        <foreach collection="list" item="employmentStatus" separator=",">
            (#{employmentStatus.userPolicyConditionId}, #{employmentStatus.employmentStatusId}, NOW())
        </foreach>
    </insert>

    <insert id="saveUserEducationLevels" parameterType="java.util.List">
        INSERT INTO user_education_level (user_policy_condition_id, education_level_id, created_at)
        VALUES
        <foreach collection="list" item="educationLevel" separator=",">
            (#{educationLevel.userPolicyConditionId}, #{educationLevel.educationLevelId}, NOW())
        </foreach>
    </insert>

    <resultMap id="userPolicyConditionMap" type="org.scoula.userPolicy.domain.UserPolicyConditionVO">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="age" column="age"/>
        <result property="marriage" column="marriage"/>
        <result property="income" column="income"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <collection property="regions" ofType="org.scoula.userPolicy.domain.UserRegionVO"
                    javaType="java.util.ArrayList"
                    select="findRegionsByConditionId" column="id"/>
        <collection property="educationLevels" ofType="org.scoula.userPolicy.domain.UserEducationLevelVO"
                    javaType="java.util.ArrayList"
                    select="findEducationLevelsByConditionId" column="id"/>
        <collection property="employmentStatuses" ofType="org.scoula.userPolicy.domain.UserEmploymentStatusVO"
                    javaType="java.util.ArrayList"
                    select="findEmploymentStatusesByConditionId" column="id"/>
        <collection property="majors" ofType="org.scoula.userPolicy.domain.UserMajorVO"
                    javaType="java.util.ArrayList"
                    select="findMajorsByConditionId" column="id"/>
        <collection property="specialConditions" ofType="org.scoula.userPolicy.domain.UserSpecialConditionVO"
                    javaType="java.util.ArrayList"
                    select="findSpecialConditionsByConditionId" column="id"/>
        <collection property="keywords" ofType="org.scoula.userPolicy.domain.UserPolicyKeywordVO"
                    javaType="java.util.ArrayList"
                    select="findKeywordsByConditionId" column="id"/>
    </resultMap>

    <select id="findUserPolicyConditionByUserId" resultMap="userPolicyConditionMap">
        SELECT *
        FROM user_policy_condition
        WHERE user_id = #{userId}
    </select>

    <select id="findRegionsByConditionId" resultType="org.scoula.userPolicy.domain.UserRegionVO">
        SELECT *
        FROM user_policy_region
        WHERE user_policy_condition_id = #{id}
    </select>

    <select id="findEducationLevelsByConditionId" resultType="org.scoula.userPolicy.domain.UserEducationLevelVO">
        SELECT *
        FROM user_education_level
        WHERE user_policy_condition_id = #{id}
    </select>

    <select id="findEmploymentStatusesByConditionId" resultType="org.scoula.userPolicy.domain.UserEmploymentStatusVO">
        SELECT *
        FROM user_employment_status
        WHERE user_policy_condition_id = #{id}
    </select>

    <select id="findMajorsByConditionId" resultType="org.scoula.userPolicy.domain.UserMajorVO">
        SELECT *
        FROM user_major
        WHERE user_policy_condition_id = #{id}
    </select>

    <select id="findSpecialConditionsByConditionId" resultType="org.scoula.userPolicy.domain.UserSpecialConditionVO">
        SELECT *
        FROM user_special_condition
        WHERE user_policy_condition_id = #{id}
    </select>

    <select id="findKeywordsByConditionId" resultType="org.scoula.userPolicy.domain.UserPolicyKeywordVO">
        SELECT *
        FROM user_policy_keyword
        WHERE user_policy_condition_id = #{id}
    </select>

    <select id="findMatchingPolicyIds" resultType="Long">
        SELECT ypc.policy_id
        FROM youth_policy yp
        JOIN youth_policy_condition ypc ON yp.id = ypc.policy_id
        WHERE is_financial_support = 1

        <!-- 나이 조건 -->
        AND (
        ypc.age_limit_yn = 1
        OR (
        (ypc.max_age IS NULL AND #{age} >= ypc.min_age)
        OR
        (ypc.max_age IS NOT NULL AND #{age} >= ypc.min_age AND ypc.max_age >= #{age})
        )
        OR #{age} = 0
        )

        <!-- 혼인 여부 조건 -->
        AND (
        #{marriage} = ""
        OR ypc.marriage_status IS NULL
        OR TRIM(ypc.marriage_status) = ''
        OR ypc.marriage_status = '0055003'
        OR ypc.marriage_status = #{marriage}
        )

        <!-- 소득 조건 -->
        AND (
        #{income} = 0
        OR ypc.income_condition_code IS NULL
        OR TRIM(ypc.income_condition_code) = ''
        OR ypc.income_condition_code = '0043001'
        OR ypc.income_condition_code = '0043003'
        OR (
        ypc.income_condition_code = '0043002'
        AND (ypc.income_min IS NULL OR #{income} >= ypc.income_min)
        AND (ypc.income_max IS NULL OR ypc.income_max >= #{income})
        )
        )

        <!-- 지역 조건 -->
        AND (
        NOT EXISTS (
        SELECT 1
        FROM user_policy_region upr
        WHERE upr.user_policy_condition_id = #{id}
        )
        OR EXISTS (
        SELECT 1
        FROM user_policy_region upr
        JOIN policy_region upr_pr ON upr.region_id = upr_pr.id
        JOIN youth_policy_region ypr ON upr.user_policy_condition_id = #{id} AND ypr.policy_id = yp.id
        JOIN policy_region ypr_pr ON ypr.region_id = ypr_pr.id
        WHERE
        -- 정확히 지역 코드 일치
        upr_pr.region_code = ypr_pr.region_code

        -- OR: 정책 지역이 도 코드일 경우, 사용자 지역이 같은 도에 속하면 OK
        OR (
        RIGHT(ypr_pr.region_code, 3) = '000'
        AND LEFT(upr_pr.region_code, 2) = LEFT(ypr_pr.region_code, 2)
        )
        )
        )


        <!-- 학력 조건 -->
        AND (
        NOT EXISTS (
        SELECT 1 FROM user_education_level uel
        WHERE uel.user_policy_condition_id = #{id}
        )
        OR EXISTS (
        SELECT 1
        FROM youth_policy_education_level ypel
        WHERE ypel.policy_id = yp.id
        AND (
        ypel.education_level_id IN (
        SELECT uel.education_level_id
        FROM user_education_level uel
        WHERE uel.user_policy_condition_id = #{id}
        )
        OR ypel.education_level_id = '0049010' -- 제한 없음
        )
        )
        )

        <!-- 취업 상태 조건 -->
        AND (
        NOT EXISTS (
        SELECT 1 FROM user_employment_status ues
        WHERE ues.user_policy_condition_id = #{id}
        )
        OR EXISTS (
        SELECT 1
        FROM youth_policy_employment_status ypes
        WHERE ypes.policy_id = yp.id
        AND (
        ypes.employment_status_id IN (
        SELECT ues.employment_status_id
        FROM user_employment_status ues
        WHERE ues.user_policy_condition_id = #{id}
        )
        OR ypes.employment_status_id = '0013010' -- 제한 없음
        )
        )
        )

        <!-- 전공 조건 -->
        AND (
        NOT EXISTS (
        SELECT 1 FROM user_major um
        WHERE um.user_policy_condition_id = #{id}
        )
        OR EXISTS (
        SELECT 1
        FROM youth_policy_major ypm
        WHERE ypm.policy_id = yp.id
        AND (
        ypm.major_id IN (
        SELECT um.major_id
        FROM user_major um
        WHERE um.user_policy_condition_id = #{id}
        )
        OR ypm.major_id = '0011009' -- 제한 없음
        )
        )
        )

        <!-- 특수 조건 -->
        AND (
        NOT EXISTS (
        SELECT 1 FROM user_special_condition usc
        WHERE usc.user_policy_condition_id = #{id}
        )
        OR EXISTS (
        SELECT 1
        FROM youth_policy_special_condition ypsc
        WHERE ypsc.policy_id = yp.id
        AND (
        ypsc.special_condition_id IN (
        SELECT usc.special_condition_id
        FROM user_special_condition usc
        WHERE usc.user_policy_condition_id = #{id}
        )
        OR ypsc.special_condition_id = '0014010' -- 제한 없음
        )
        )
        )

        <!-- 키워드 조건 -->
        AND (
        NOT EXISTS (
        SELECT 1 FROM user_policy_keyword upk
        WHERE upk.user_policy_condition_id = #{id}
        )
        OR EXISTS (
        SELECT 1
        FROM user_policy_keyword upk
        JOIN youth_policy_keyword ypk
        ON upk.keyword_id = ypk.keyword_id
        WHERE upk.user_policy_condition_id = #{id}
        AND ypk.policy_id = yp.id
        )
        )
    </select>

    <insert id="saveUserFilteredPolicies" parameterType="java.util.List">
        INSERT INTO user_policy_score (user_id, policy_id, created_at)
        VALUES
        <foreach collection="list" item="policyList" separator=",">
            (#{policyList.userID}, #{policyList.policyId}, NOW())
        </foreach>
    </insert>
</mapper>
