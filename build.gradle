plugins {
    id 'java'
    id 'war'
}

group 'org.scoula'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
    springVersion = '5.3.39'
    lombokVersion = '1.18.38'
    aspectjVersion = '1.9.20.1'
    log4j2Version = '2.24.1'
    jacksonVersion = '2.12.7'
    springSecurityVersion = '5.8.13'
}
sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    // ===== Redis 관련 의존성 =====
    implementation 'io.lettuce:lettuce-core:6.2.5.RELEASE' // Redis 클라이언트: Lettuce

    // ===== Firebase 관련 의존성 =====
    // Firebase Admin SDK (FCM 전송용)
    implementation 'com.google.firebase:firebase-admin:9.2.0'
    // ✅ Firebase Admin SDK (FCM 전송용)
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // ===== Spring Framework 관련 의존성 =====
    // Spring Core 컨테이너 - IoC/DI 기능 제공 (5.3.39 - 마지막 5.3.x 버전, 보안 패치 포함)
    implementation("org.springframework:spring-context:${springVersion}")
            { exclude group: 'commons-logging', module: 'commons-logging' } // commons-logging 제외 (Log4j2 사용)

    // Spring MVC - 웹 애플리케이션 개발을 위한 프레임워크
    implementation "org.springframework:spring-webmvc:${springVersion}"

    // JSR-330 의존성 주입 표준 어노테이션 지원 (@Inject 등)
    implementation 'javax.inject:javax.inject:1'

    // ===== AOP (Aspect-Oriented Programming) 관련 의존성 =====
    // AspectJ 런타임 - AOP 기능 실행을 위한 라이브러리 (최신 마이너 버전)
    implementation "org.aspectj:aspectjrt:${aspectjVersion}"
    // AspectJ 위버 - 컴파일/로드 타임에 AOP 적용 (최신 마이너 버전)
    implementation "org.aspectj:aspectjweaver:${aspectjVersion}"

    // ===== 웹 개발 관련 의존성 (JSP, Servlet, JSTL) =====
    // Java Servlet API - 웹 애플리케이션 개발의 기본 API (안정 버전 유지)
    implementation('javax.servlet:javax.servlet-api:4.0.1')
    testImplementation 'junit:junit:4.13.1'
    // JSP API - JSP 페이지 개발을 위한 API (컴파일 시에만 필요)
    compileOnly 'javax.servlet.jsp:jsp-api:2.1'
    // JSTL - JSP 표준 태그 라이브러리 (안정 버전 유지)
    implementation 'javax.servlet:jstl:1.2'

    // ===== 로깅 시스템 (Log4j2) - 최신 버전으로 업데이트 =====
    // Log4j2 API - 로깅 인터페이스 (2.24.1 - 최신 안정 버전, 보안 개선 포함)
    implementation "org.apache.logging.log4j:log4j-api:${log4j2Version}"
    // Log4j2 Core - 로깅 구현체 (성능 및 보안 개선)
    implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"
    // SLF4J와 Log4j2 연결 - Spring에서 사용하는 SLF4J를 Log4j2로 연결
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j2Version}"

    // ===== XML 처리 관련 =====
    // Xerces XML 파서 - XML 내 한글 문자 처리 개선 (안정 버전 유지)
    implementation 'xerces:xercesImpl:2.12.2'

    // ===== 개발 편의성 도구 =====
    // Lombok - 보일러플레이트 코드 자동 생성 (@Getter, @Setter, @ToString 등)
    // 최신 버전으로 업데이트 (Java 17+ 지원 개선)
    compileOnly "org.projectlombok:lombok:${lombokVersion}"                    // 컴파일 시에만 필요
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"            // 어노테이션 처리기

    // ===== JSON 처리 =====
    // Jackson - JSON 직렬화/역직렬화 라이브러리 (Spring 5.3.x와 호환되는 최신 버전)
    // 2.12.7은 Spring Framework 5.3.x와 호환성이 보장되는 안정적인 최신 버전
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // ===== 테스트 관련 의존성 - 최신 버전으로 업데이트 =====
    // Spring Test - Spring 애플리케이션 테스트 지원
    testImplementation "org.springframework:spring-test:${springVersion}"

    // 테스트에서도 Lombok 사용 (최신 버전)
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // JUnit 5 - 현대적인 Java 테스팅 프레임워크 (5.13.1 - 최신 안정 버전)
    // 새로운 기능과 버그 수정, 성능 개선 포함
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")     // JUnit 5 API
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")     // JUnit 5 실행 엔진


    // ===== 데이터베이스 관련 의존성 =====
    implementation 'com.mysql:mysql-connector-j:9.3.0'     // MySQL JDBC 드라이버
    implementation 'com.zaxxer:HikariCP:3.4.5'             // 커넥션 풀 라이브러리

    // ===== 스프링 데이터베이스 지원=====
    implementation "org.springframework:spring-tx:${springVersion}"
    implementation "org.springframework:spring-jdbc:${springVersion}"

    // ===== MyBatis 핵심 라이브러리 =====
    implementation 'org.mybatis:mybatis:3.5.19'
    implementation 'org.mybatis:mybatis-spring:2.1.2'


    // SQL 로깅 라이브러리 - 최신 버전으로 업데이트 (Java 8+ 호환)
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
//    implementation 'org.apache.logging.log4j:log4j-api:2.0.1'
//    implementation 'org.apache.logging.log4j:log4j-core:2.0.1'

    // === Spring Security 핵심 의존성 ===

    // spring-security-web: 웹 관련 보안 기능
    implementation("org.springframework.security:spring-security-web:${springSecurityVersion}")

    // spring-security-config: 설정 관련 기능
    implementation("org.springframework.security:spring-security-config:${springSecurityVersion}")

    // spring-security-core: 핵심 보안 기능
    implementation("org.springframework.security:spring-security-core:${springSecurityVersion}")

    // spring-security-taglibs: JSP 태그 라이브러리
    implementation("org.springframework.security:spring-security-taglibs:${springSecurityVersion}")

    // Swagger 관련 의존성
    implementation 'io.springfox:springfox-swagger2:2.9.2'       // Swagger 핵심 라이브러리
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'     // Swagger UI 웹 인터페이스

    // JWT 관련 의존성
    implementation("io.jsonwebtoken:jjwt-api:0.11.5")         // JWT API 인터페이스
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")           // JWT 구현체
    implementation("io.jsonwebtoken:jjwt-jackson:0.11.5")     // JSON 직렬화/역직렬화

    // Redis 관련 의존성
    // Redis 클라이언트: Lettuce
    implementation 'redis.clients:jedis:4.4.3'

    // Spring Data Redis
    implementation 'org.springframework.data:spring-data-redis:2.7.5'

    // Lettuce 커넥션 풀 필수 의존성
    implementation 'org.apache.commons:commons-pool2:2.11.1'
    implementation 'io.lettuce:lettuce-core:6.2.5.RELEASE'

    // ===== Spring Retry 관련 의존성 =====
    // Spring Retry - 재시도 메커니즘 (@Retryable 지원)
    implementation 'org.springframework.retry:spring-retry:1.3.4'
    // Spring AOP - @Retryable이 AOP 기반으로 동작하므로 필요
    implementation "org.springframework:spring-aspects:${springVersion}"

    // Jackson (Object → JSON 변환)
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'

    // 메일 전송용 (JavaMailSender)
    implementation 'org.springframework:spring-context-support:4.3.9.RELEASE'
    implementation 'com.sun.mail:javax.mail:1.6.2'  // JavaMail API

    implementation 'io.lettuce:lettuce-core:6.2.5.RELEASE'
}
// 테스트 실행 설정
test {
    useJUnitPlatform()  // JUnit 5 플랫폼 사용하여 테스트 실행
}
